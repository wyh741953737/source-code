<!-- swiper -s- -->
<!--
  需要变量 banners: [{ url: '', img: '', alt: '' }]
-->
<link rel="stylesheet" href="https://cc-west-usa.oss-accelerate.aliyuncs.com/web/cjweb/swiper-5.3.6/swiper.min.css">
{% if EGG_ENV === 'local' %}
<script src="{{ PUBLIC_LIBS }}/swiper-5.3.6/swiper.js"></script>
{% else %}
<script src="https://cc-west-usa.oss-accelerate.aliyuncs.com/web/cjweb/swiper-5.3.6/swiper.min.js"></script>
{% endif %}
<style>
  .swiper-wrapper {
    transition-timing-function: ease;
  }

  .swiper-button-next,
  .swiper-button-prev {
    background-color: #000;
    opacity: 0;
    width: 30px;
    height: 50px;
    cursor: pointer;
  }

  /* 去掉 swiper 默认的按钮箭头 */
  [class^="swiper-button"]::after {
    content: '';
  }

  .swiper-container:hover .swiper-button-prev,
  .swiper-container:hover .swiper-button-next {
    opacity: .4;
    transition: .3s;
  }

  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    opacity: 1 !important;
  }

  .swiper-button-prev {
    left: 0;
    border-radius: 0 2px 2px 0;
    background: url("{{ PUBLIC_LIBS }}/swiper-5.3.6/prev_icon.svg") center center / cover;
  }

  .swiper-button-next {
    right: 0;
    border-radius: 2px 0 0 2px;
    background: url("{{ PUBLIC_LIBS }}/swiper-5.3.6/next_icon.svg") center center / cover;
  }

  .swiper-pagination {
    display: flex;
    align-items: center;
    justify-content: center;
    bottom: 20px !important;
  }

  .swiper-pagination.new-pagination {
    /* width: 148px !important; */
    
    display: inline-block !important;
    width: auto !important;
    height: 14px;
    line-height: 10px;
    padding: 2px 16px;
    background: rgba(0, 0, 0, 0.15);
    border-radius: 8px;
    position: absolute;
    left: 50% !important;
    transform: translateX(-50%);
  }

  .swiper-pagination-bullet {
    width: 10px !important;
    height: 10px !important;
    /* border: 2px solid rgba(255, 255, 255, .7); */
    margin: 0 6px;
    border-radius: 50%;
    cursor: pointer;
    transition: all .8s;
    -moz-transition: all .8s;
    -webkit-transition: all .8s;
    /* background-color: transparent; */
    background-color: rgba(255, 255, 255, 0.4) !important;
    opacity: 1 !important;
  }

  .banner-box .swiper-pagination-bullet {
    border: none !important;
    /* background-color: rgba(255, 255, 255, 1) !important; */
  }

  .banner-box .swiper-pagination-bullet-active {
    background: #fff !important;
    box-shadow: none !important;
  }

  .swiper-pagination-bullet-active {
    background: var(--color-primary);
    background-clip: content-box;
    border: none;
    box-shadow: 0 0 0 4px var(--color-primary-translucent);
  }

  .swiper-slide a.islink:hover {
    cursor: pointer;
  }

  .swiper-slide a.unlink:hover {
    cursor: default
  }

  .swiper-container.shop {
    max-height: 250px;
  }

  #swiper-container .swiper-slide img {
    width: 100%;
    height: 100%;
  }
</style>
<div class="swiper-container" id="swiper-container" style="width: 660px;height: 550px;">
  <div class="swiper-wrapper" id="vue-swiper-container">
    {% for item in banners %}
    <div 
      data-tracking-element-click='{"actionType": "banner_click", "elementId": "001", "list":[{"filedName": "bannerId", "fieldValue": "{{ _getBannerId(item.jsonItem) }}"}]}'
      data-tracking-element-view='{"actionType": "banner_exposure", "elementId": "002", "list":[{"filedName": "bannerId", "fieldValue": "{{ _getBannerId(item.jsonItem) }}"}]}'
      class="swiper-slide" cjdotshow='{"pageCode":"home", "eventType": 0, "buttonName": {{ item.jsonItem }},"buttonType": 0}'>
      <a href="{{ _createLink(item.jsonItem) }}" onclick="event.preventDefault();goLinkClick('{{ item.jsonItem }}')" target="_blank" >
        <img src="{{ item.webImg }}" alt="">
      </a>
    </div>
    {% endfor %}
  </div>
  <!-- 如果需要分页器 -->
  <div class="swiper-pagination new-pagination" id="home-swiper-pagination"></div>

  <!-- 如果需要导航按钮 -->
  <div class="swiper-button-prev"></div>
  <div class="swiper-button-next"></div>
</div>
<script>
 var observer = new IntersectionObserver(function (entries) {
    entries.forEach((entry, index) => {
      // 这段逻辑，是每一个被观察的组件进入视窗时都会触发的
      if (entry.isIntersecting) {
        // 把进入视口的组件数据添加进待上报的数据对象中
        let show = entry.target.attributes['cjdotshow'].value;
        // console.log("我看见了++++++++++++++++++++" + show )
        show = JSON.parse(show)
        let curObj = {}
        curObj.pageCode = show['pageCode'];
        curObj.eventType = show['eventType'];
        curObj.conversationId = getSessionId();
        curObj.operationSequence = getOptionOrderFun();
        curObj.buttonName = "bannerId_"+ show['buttonName'].id;
        curObj.operationPageAddress = location.href;
        curObj.userId = localStorage.getItem('userId') ? localStorage.getItem('userId') : '', //客户id 用来区分是否游客
        // 停止观察进入视口的组件
        observer.unobserve(entry.target)
        // 超过一定数量埋点，上报后会删除这一批
        $.ajax({
          type: 'POST',
          url: '{{ apiPrefix("collection/dot/saveDot") }}',
          dataType: 'json',
          contentType: "application/json;charset=utf-8",
          data: JSON.stringify({"collectionParaList":[curObj]}),
          sucess: function () {}
        })
      }
    })
  }, {
    root: null, // 默认根节点是视口
    rootMargin: '0px',
    threshold: 0.7 // 全部进入视口才被观察  这个阈值介于0和1之间
  })
  document.querySelectorAll('.swiper-slide').forEach(item => {
      observer.observe(item) // 观察每一个进入视口的区域
  })
  function getSessionId() {
    let sessionId = sessionStorage.getItem('conversationId')
    if (!sessionId) {
      sessionId = (Math.random() * 10000000).toString(16).substr(0, 4) + '-' + (new Date()).getTime().toString().substr(6) + '-' + Math.random().toString().substr(2, 5);
      sessionStorage.setItem('conversationId', sessionId)
    }
    return sessionId;
  }
    /**
   * 用户操作行为顺序
   */
   function getOptionOrderFun() {
    let curOptionOrderId = sessionStorage.getItem('optionOrderId')
    if (curOptionOrderId) {
      curOptionOrderId = curOptionOrderId - 0 + 1;
      sessionStorage.setItem('optionOrderId', curOptionOrderId);
    } else {
      sessionStorage.setItem('optionOrderId', 0)
      curOptionOrderId = 0;
    }
    return curOptionOrderId;
  }
  var mySwiper = new Swiper('.swiper-container', {
    direction: 'horizontal', // 垂直切换选项
    loop: true, // 循环模式选项
    autoplay: true,
    delay: 5000,
    speed: 1500,

    // 如果需要分页器
    pagination: {
      el: '#home-swiper-pagination',
      clickable: true,
    },

    // 如果需要前进后退按钮
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
  })
  // 先记录点击次数在进入页面
  function goLinkClick(item) {
    const obj = JSON.parse(item)
    console.log('记录埋点');
    $.ajax({
      type: 'POST',
      url: '{{ apiPrefix("cj/banner/checkBanner") }}',
      dataType: 'json',
      contentType: "application/json;charset=utf-8",
      data: JSON.stringify({
        bannerId: obj.id
      }),
      sucess: function () {}
    })
    $.ajax({
      type: 'POST',
      url: '{{ apiPrefix("collection/dot/saveDot") }}',
      dataType: 'json',
      contentType: "application/json;charset=utf-8",
      data: JSON.stringify({"collectionParaList":[{"pageCode":"home", "eventType": 1, "buttonName": "bannerId_" + obj.id,"buttonType": 0}]}),
      sucess: function () {}
    })
    if (obj.urlOrSku) {
      if (obj.skipType == '3' && obj.isSkuOut == '0') { //商品详情页
        window.open(`product-detail.html?id=${obj.pid}&from=all&fromType=all&productType=0`);
      } else if (obj.skipType == '2') { //指定页面
        window.open(obj.urlOrSku);
      } else if (obj.skipType === '4') {
        location.href = obj.urlOrSku
      }
    }
  }
</script>
<!-- swiper -e- -->