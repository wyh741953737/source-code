(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[54],{

/***/ "../src/pages/mycj/shipping-calculation/shipping-calculation.js":
/*!**********************************************************************!*\
  !*** ../src/pages/mycj/shipping-calculation/shipping-calculation.js ***!
  \**********************************************************************/
/*! exports provided: shippingCalculationFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shippingCalculationFactory\", function() { return shippingCalculationFactory; });\nfunction shippingCalculationFactory(angular) {\n  var app = angular.module('shipping-calculation.module', ['service']); //执行完毕执行\n\n  app.directive('repeatFinish', function () {\n    return {\n      link: function link(scope, element, attr) {\n        if (scope.$last == true) {\n          scope.$eval(attr.repeatFinish);\n        }\n      }\n    };\n  }); // 1.运费试算工具\n\n  app.controller('shipping-calculation.ctrl', ['$scope', 'dsp', function ($scope, dsp) {\n    return location.href = '/calculation.html'; // 跳转到新的运费试算\n\n    console.log(\"shipping-calculation.ctrl\");\n\n    if (dsp.isPhone()) {\n      var jsonArgs = dsp.href2json(window.location.href);\n      jsonArgs.page = 'shipping-cost-calculation';\n      dsp.skipToMobile(jsonArgs);\n      return;\n    }\n\n    var upcsData = {};\n    upcsData.country = \"CN\";\n    dsp.postFun2(\"getNewModel.json\", JSON.stringify(upcsData), function (data) {\n      console.log(data);\n\n      if (data.status == 200) {\n        var obj = data.data;\n        $scope.logistics = obj;\n        $scope.logisticsMode = \"\";\n      }\n    }, function (data) {//          alert(\"物流信息获取失败\");\n    });\n    console.log($(window).height() * 1);\n    console.log($(window).height() * 1 - 180);\n    $('.ea-right-content').css('min-height', $(window).height() * 1 - 180 + 'px'); //根据物流方式筛选能到的国家\n\n    $scope.isallFlag = true;\n\n    $scope.logisticsMode1 = function (logisticsMode) {\n      console.log(logisticsMode);\n      console.log($scope.exportingCountry);\n\n      if ($scope.exportingCountry == '美国' || $scope.exportingCountry == '泰国') {\n        if (logisticsMode == '') {\n          $scope.isallFlag = true;\n        } else {\n          $scope.isallFlag = false;\n        }\n\n        if ($scope.isallFlag) {\n          //获取目的国家\n          var usUpdata = {};\n\n          if ($scope.exportingCountry == '美国') {\n            usUpdata.country = \"US\";\n          } else if ($scope.exportingCountry == '泰国') {\n            usUpdata.country = \"TH\";\n          }\n\n          dsp.postFun(\"app/logistic/getCountryByAll\", JSON.stringify(usUpdata), function (data) {\n            console.log(data.data);\n\n            if (data.status == 200) {\n              var obj = JSON.parse(data.data.result);\n              console.log(obj.countryList);\n              $scope.nation = obj.countryList;\n\n              if ($scope.exportingCountry == '美国') {\n                $scope.countryDestination = \"US\";\n              } else if ($scope.exportingCountry == '泰国') {\n                $scope.countryDestination = \"TH\";\n              }\n            }\n          }, function (data) {\n            layer.msg(\"国家信息获取失败\");\n          });\n        } else {\n          var upData = {};\n          upData.loginsticName = logisticsMode;\n\n          if ($scope.exportingCountry == '美国') {\n            upData.country = \"US\";\n          } else if ($scope.exportingCountry == '泰国') {\n            upData.country = \"TH\";\n          }\n\n          console.log(JSON.stringify(upData));\n          dsp.postFun2('lc/erplogistics/getLogisticCountry', JSON.stringify(upData), function (data) {\n            // console.log(data)\n            console.log(data.data);\n            $scope.filterCountry = data.data;\n            console.log($scope.filterCountry); // $scope.countryDestination = \"US\";\n\n            for (var i = 0; i < $scope.filterCountry.length; i++) {\n              if ($scope.filterCountry[i].country == \"US\") {\n                $scope.countryDestination = \"US\";\n                break;\n              } else {\n                $scope.countryDestination = $scope.filterCountry[0].country;\n              }\n            }\n          }, function (data) {\n            console.log(data);\n          });\n        }\n      } else {\n        if (logisticsMode == '') {\n          $scope.isallFlag = true;\n        } else {\n          $scope.isallFlag = false;\n        }\n\n        if ($scope.isallFlag) {\n          //获取目的国家\n          dsp.postFun(\"app/logistic/getcountry\", null, function (data) {\n            console.log(data.data); //          console.log(data.data.result);\n\n            if (data.status == 200) {\n              var obj = JSON.parse(data.data.result);\n              console.log(obj.countryList);\n              $scope.nation = obj.countryList; // $scope.countryDestination = \"US\";\n\n              if ($scope.exportingCountry == '美国') {\n                $scope.countryDestination = \"US\";\n              } else if ($scope.exportingCountry == '泰国') {\n                $scope.countryDestination = \"TH\";\n              }\n            }\n          }, function (data) {\n            layer.msg(\"国家信息获取失败\");\n          });\n        } else {\n          var upData = {};\n          upData.loginsticName = logisticsMode;\n          upData.country = 'CN';\n          console.log(JSON.stringify(upData));\n          dsp.postFun2('lc/erplogistics/getLogisticCountry', JSON.stringify(upData), function (data) {\n            // console.log(data)\n            console.log(data.data);\n            $scope.filterCountry = data.data;\n            console.log($scope.filterCountry); // $scope.countryDestination = \"US\";\n\n            for (var i = 0; i < $scope.filterCountry.length; i++) {\n              if ($scope.filterCountry[i].country == \"US\") {\n                $scope.countryDestination = \"US\";\n                break;\n              } else {\n                $scope.countryDestination = $scope.filterCountry[0].country;\n              }\n            }\n          }, function (data) {\n            console.log(data);\n          });\n        }\n      }\n    }; //筛选国家\n\n\n    $scope.exportingCountry = '中国';\n    $scope.cnorusCode = 'CN';\n\n    $scope.exportingCountry1 = function (exportingCountry) {\n      $scope.isallFlag = true;\n      console.log(exportingCountry);\n      console.log($scope.exportingCountry);\n      var upcsData = {};\n\n      if ($scope.exportingCountry == '中国') {\n        $scope.cnorusCode = 'CN';\n        upcsData.country = \"CN\";\n        dsp.postFun2(\"getNewModel.json\", JSON.stringify(upcsData), function (data) {\n          console.log(data);\n\n          if (data.status == 200) {\n            var obj = data.data;\n            $scope.logistics = obj;\n            $scope.logisticsMode = \"\";\n          }\n        }, function (data) {\n          console.log('获取物流失败');\n        });\n        dsp.postFun(\"app/logistic/getcountry\", null, function (data) {\n          console.log(data.data); //          console.log(data.data.result);\n\n          console.log($scope.isallFlag);\n\n          if (data.status == 200) {\n            var obj = JSON.parse(data.data.result);\n            console.log(obj.countryList);\n            $scope.nation = obj.countryList;\n            $scope.countryDestination = \"US\";\n          }\n        }, function (data) {\n          console.log(\"国家信息获取失败\");\n        });\n      } else {\n        if ($scope.exportingCountry == '美国') {\n          $scope.cnorusCode = 'US';\n          upcsData.country = \"US\";\n        } else if ($scope.exportingCountry == '泰国') {\n          $scope.cnorusCode = 'TH';\n          upcsData.country = \"TH\";\n        }\n\n        dsp.postFun2(\"getNewModel.json\", JSON.stringify(upcsData), function (data) {\n          console.log(data);\n\n          if (data.status == 200) {\n            var obj = data.data;\n            $scope.logistics = obj;\n            $scope.logisticsMode = \"\";\n          }\n        }, function (data) {\n          console.log('获取物流失败');\n        });\n        var usUpdata = {}; // usUpdata.country = \"US\";\n\n        if ($scope.exportingCountry == '美国') {\n          usUpdata.country = 'US';\n        } else if ($scope.exportingCountry == '泰国') {\n          usUpdata.country = 'TH';\n        }\n\n        dsp.postFun(\"app/logistic/getCountryByAll\", JSON.stringify(usUpdata), function (data) {\n          console.log(data.data);\n          console.log($scope.isallFlag);\n\n          if (data.status == 200) {\n            var obj = JSON.parse(data.data.result);\n            console.log(obj.countryList);\n            $scope.nation = obj.countryList;\n\n            if ($scope.exportingCountry == '美国') {\n              $scope.countryDestination = \"US\";\n            } else if ($scope.exportingCountry == '泰国') {\n              $scope.countryDestination = 'TH';\n            }\n          }\n        }, function (data) {\n          layer.msg(\"国家信息获取失败\");\n        });\n      }\n    }; //获取目的国家\n\n\n    dsp.postFun(\"app/logistic/getcountry\", null, function (data) {\n      console.log(data.data);\n\n      if (data.status == 200) {\n        var obj = JSON.parse(data.data.result);\n        console.log(obj.countryList);\n        $scope.nation = obj.countryList;\n        $scope.countryDestination = \"US\";\n      }\n    }, function (data) {\n      console.log(\"国家信息获取失败\"); //alert(\"国家信息获取失败\")\n    });\n\n    $scope.countryDestination1 = function () {\n      console.log($scope.countryDestination);\n    }; //获取属性的东西\n\n\n    var chactBoc = [];\n\n    $scope.getPropertyInfo = function (ev) {\n      var checked = $(ev.target).prop('checked');\n\n      if (checked == true) {\n        chactBoc.push($(ev.target).val());\n      }\n\n      if (checked == false) {\n        for (var i = 0; i < chactBoc.length; i++) {\n          if (chactBoc[i] == $(ev.target).val()) {\n            chactBoc.splice(i, 1);\n          }\n        }\n      }\n    }; //设置input框的值\n\n\n    $scope.weightNum1 = function () {\n      console.log($scope.weightNum);\n\n      if ($scope.weightNum <= 0) {\n        $scope.weightNum = 0;\n      }\n    }; //点击计算\n\n\n    $scope.countBtn = function () {\n      console.log(chactBoc.length);\n      console.log($scope.weightNum);\n      var chactBocloda = chactBoc.join(\",\");\n\n      if (!(chactBoc.length == 0) && $scope.weightNum) {\n        if ($scope.pLength || $scope.pWidth || $scope.pHeight) {\n          $scope.countResult = [];\n\n          if (!$scope.pLength || $scope.pLength < 0) {\n            layer.msg('Please enter length');\n            return;\n          }\n\n          if (!$scope.pWidth || $scope.pWidth < 0) {\n            layer.msg('Please enter width');\n            return;\n          }\n\n          if (!$scope.pHeight || $scope.pHeight < 0) {\n            layer.msg('Please enter height');\n            return;\n          }\n\n          dsp.loadPercent($('.table-con-box-div'), $('.table-con-box-div').height(), 0, 0);\n          dsp.postFun2(\"lc/erplogistics/getFreight\", {\n            \"country\": $scope.countryDestination,\n            \"weight\": $scope.weightNum,\n            \"enName\": $scope.logisticsMode,\n            \"character\": chactBocloda,\n            \"area\": $scope.cnorusCode,\n            \"length\": $scope.pLength,\n            \"width\": $scope.pWidth,\n            \"height\": $scope.pHeight\n          }, function (data) {\n            console.log(data);\n            dsp.closeLoadPercent($('.table-con-box-div'));\n\n            if (data.status == 200) {\n              if (data.data.length == 1 && data.data[0].code == '401') {\n                dsp.addNodataPic($('.table-con-box-div'), $('.table-con-box-div').height(), 0, -1);\n                $scope.countResult = []; //该国家无法到达或者货物受限\n\n                layer.msg(\"Weight excessed or country unreachable\");\n              } else {\n                dsp.removeNodataPic($('.table-con-box-div')); // $scope.countResult = data.data;\n\n                if ($scope.exportingCountry == '中国') {\n                  for (var i = 0, len = data.data.length; i < len; i++) {\n                    if (data.data[i].logisticName == 'USPS+') {\n                      data.data.splice(i, 1);\n                      break;\n                    }\n                  }\n\n                  $scope.countResult = data.data;\n                } else {\n                  $scope.countResult = data.data;\n                }\n              }\n            }\n          }, function (data) {\n            layer.msg(\"Data Analysis Failed\");\n            dsp.closeLoadPercent($('.table-con-box-div'));\n          });\n        } else {\n          dsp.loadPercent($('.table-con-box-div'), $('.table-con-box-div').height(), 0, 0);\n          dsp.postFun2(\"lc/erplogistics/getFreight\", {\n            \"country\": $scope.countryDestination,\n            \"weight\": $scope.weightNum,\n            \"enName\": $scope.logisticsMode,\n            \"character\": chactBocloda,\n            \"area\": $scope.cnorusCode\n          }, function (data) {\n            console.log(data);\n            console.log(data.status == 200);\n\n            if (data.status == 200) {\n              console.log($scope.exportingCountry);\n\n              if (data.data.length == 1 && data.data[0].code == '401') {\n                $scope.countResult = [];\n                dsp.addNodataPic($('.table-con-box-div'), $('.table-con-box-div').height(), 0, -1); //该国家无法到达或者货物受限\n\n                layer.msg(\"Weight excessed or country unreachable\");\n              } else {\n                dsp.removeNodataPic($('.table-con-box-div')); // $scope.countResult = data.data;\n\n                if ($scope.exportingCountry == '中国') {\n                  for (var i = 0, len = data.data.length; i < len; i++) {\n                    if (data.data[i].logisticName == 'USPS+') {\n                      data.data.splice(i, 1);\n                      break;\n                    }\n                  }\n\n                  $scope.countResult = data.data;\n                } else {\n                  $scope.countResult = data.data;\n                }\n\n                console.log($scope.exportingCountry);\n              }\n            }\n\n            dsp.closeLoadPercent($('.table-con-box-div'));\n          }, function (data) {\n            dsp.closeLoadPercent($('.table-con-box-div'));\n            layer.msg(\"Data Analysis Failed\");\n          });\n        }\n      } else if (!$scope.weightNum && chactBoc.length == 0) {\n        //请填写重量和选择属性\n        layer.msg(\"Please select Attribute and Input weight!\");\n      } else if (!$scope.weightNum) {\n        //请填写重量\n        layer.msg(\"Please Inpute Weight\");\n      } else if (chactBoc.length == 0) {\n        //请选择属性\n        layer.msg(\"Please select products attribute\");\n      }\n    }; //默认展示\n\n\n    $scope.usps = false;\n    $scope.zgyz = false;\n    $scope.yyb = true;\n\n    $scope.aa = function () {\n      $(\".wllDh-logili\").eq(0).addClass(\"activewll\");\n    }; //物流方式的详细情况\n\n\n    var mapObj = {};\n\n    $scope.logisticsDetails = function (item, ev) {\n      //      \tconsole.log(item);\n      $(\".wllDh-logili\").removeClass(\"activewll\");\n      $(ev.target).addClass(\"activewll\");\n\n      if (item.enName == \"USPS\") {\n        $scope.usps = true;\n        $scope.zgyz = false;\n        $scope.yyb = false;\n      } else if (item.enName == \"China Post Registered Air Mail\") {\n        $scope.usps = false;\n        $scope.zgyz = true;\n        $scope.yyb = false;\n      } else {\n        $scope.usps = false;\n        $scope.zgyz = false;\n        $scope.yyb = true;\n      }\n\n      dsp.postFun2(\"getLogistic.json\", {\n        \"enName\": item.enName\n      }, function (data) {\n        console.log(data);\n\n        if (data.status == 200) {\n          $scope.logisticsCulars = data.data;\n        }\n      }, function (data) {\n        //查询失败\n        layer.msg(\"Data Analysis Failed\");\n      });\n    };\n  }]);\n  return app;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/pages/mycj/shipping-calculation/shipping-calculation.js\n");

/***/ })

}]);